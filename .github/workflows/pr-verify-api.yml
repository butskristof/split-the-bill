name: "Build and test API"

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOTNET_VERSION: "9.x"

permissions:
  contents: read
  pull-requests: write  # For PR comments
  checks: write         # For test results

jobs:
  build-and-test:
    name: Build and test API
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: "./api"

    steps:
      - uses: actions/checkout@v4

      - name: Set up dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore

      - name: Check formatting
        run: |
          dotnet tool restore
          dotnet csharpier check .

      - name: Build
        run: dotnet build --configuration Release --no-restore --no-incremental

      - name: Test
        run: dotnet test --configuration Release --no-build -- --coverage --coverage-output-format xml --coverage-output cobertura.xml --report-trx

      - name: Combine Coverage Reports # This is because one report is produced per project, and we want one result for all of them.
        uses: danielpalme/ReportGenerator-GitHub-Action@v5.4.3
        with:
          reports: "../**/cobertura.xml" # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
          targetdir: "${{ github.workspace }}" # REQUIRED # The directory where the generated report should be saved.
          reporttypes: "Cobertura" # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
          verbosity: "Info" # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
          title: "Code Coverage" # Optional title.
          tag: "${{ github.run_number }}_${{ github.run_id }}" # Optional tag or build version.
          customSettings: "" # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
          toolpath: "reportgeneratortool" # Default directory for installing the dotnet tool.

      - name: Upload Combined Coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: ${{ github.workspace }}/Cobertura.xml
          retention-days: 30

      - name: Publish Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "Cobertura.xml"
          badge: true
          fail_below_min: false # just informative for now
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: "10 30"

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Upload Test Result Files
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ github.workspace }}/**/TestResults/**/*
          retention-days: 5

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.18.0
        if: always()
        with:
          # NOTE: using trx_files instead of files due to https://github.com/EnricoMi/publish-unit-test-result-action/issues/424
          trx_files: "${{ github.workspace }}/**/*.trx"

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: dotnet Tests # Name of the check run which will be created
          path: ${{ github.workspace }}/**/*.trx # Path to test results
          reporter: dotnet-trx # Format of test results
